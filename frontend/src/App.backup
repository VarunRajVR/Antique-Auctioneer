import React, { Component, useContext } from "react";
import AuctionManager from "./contracts/AuctionManager.json";
import getWeb3 from "./getWeb3";
import "./App.css";
import {GlobalContext, GlobalProvider} from './GlobalContext';

class App extends Component {
  state = { storageValue: 9, web3: null, accounts: null, contract: null , bidAmount:0,isRegistered:false};
  { web3, contract, account } = useContext(GlobalContext);
  // componentDidMount = async () => {
  //   try {
  //     // Get network provider and web3 instance.
  //     const web3 = await getWeb3();

  //     // Use web3 to get the user's accounts.
  //     const accounts = await web3.eth.getAccounts();

  //     // Get the contract instance.
  //     const networkId = await web3.eth.net.getId();
  //     const deployedNetwork = AuctionManager.networks[networkId];



  //     const instance = new web3.eth.Contract(
  //       AuctionManager.abi,
  //       deployedNetwork && deployedNetwork.address,
  //     );
  //     instance.options.address = "0x5731e62Fba66cDC40d84FEdab49f18A6d44c24Bf";
  //     // Set web3, accounts, and contract to the state, and then proceed with an
  //     // example of interacting with the contract's methods.




  //     const response = await contract.methods.isRegistered(accounts[0]).call();
  //     if(response[0]==1){
  //       this.setState({isRegistered:true})
  //     }



  //     this.setState({ web3, accounts, contract: instance }, this.runExample);
  //   } catch (error) {
  //     // Catch any errors for any of the above operations.
  //     alert(
  //       `Failed to load web3, accounts, or contract. Check console for details.`,
  //     );
  //     console.error(error);
  //   }
  // };


  componentDidMount = async() => {
    const { web3, contract, account } = useContext(GlobalContext);
    try{
    this.setState({ web3, account, contract }, this.runExample);
      } catch (error) {
        // Catch any errors for any of the above operations.
        alert(
          `Failed to load web3, accounts, or contract. Check console for details.`,
        );
        console.error(error);
      }

  }


   createAuc = async () =>{

    const { accounts, contract } = this.state;

    console.log("hello", "creating")

    const auction = await contract.methods.createAuction("title", "description", 15).send({ from: accounts[0] });


    const auctionList = await contract.methods.showAuctions().call();
    console.log(auctionList);
  }

  registerUser = async () =>{
    const { accounts, contract } = this.state;

    const register = await contract.methods.createUser("sakthi").send({ from: accounts[0] });
    console.log("register",register)
    console.log("hello", "set 1 ")
    

  }

  createBid = async () =>{

    const { accounts, contract,bidAmount } = this.state;

    console.log("hello", "creating")

    const auction = await contract.methods.createBid(0,bidAmount).send({ from: accounts[0] });


    const AuctionAnalytics = await contract.methods.auctionAnalytics(0).call();
    console.log(AuctionAnalytics);
  }


  handleBidChange=  (e) => {
    e.preventDefault();
    this.setState({bidAmount: e.target.value});

  }


  runExample = async () => {
    const { accounts, contract } = this.state;

    console.log("hello", "set 1 ")
    console.log(contract)
    // Stores a given value, 5 by default.
    
    console.log("hello", "set 1 ")

    // Get the value from the contract to prove it worked.



    const n = await contract.methods.uId().call();
    console.log(n);
    // for (let i = 0; i < n; i++) {
      const a = await contract.methods.users(0).call()
    console.log(a)

    // }


    const response = await contract.methods.isRegistered(accounts[0]).call();
    console.log(response)

   
    // console.log(auctionList);
    // Update state with the result.
    // this.setState({ storageValue: auctionList });

  };

  render() {

    let a = {
      a: "hello"
    }
    
    if (!this.state.web3) {
      return <div>Loading Web3, accounts, and contract...</div>;
    }
    return (
      <div className="App">
        <h1>Good to Go!</h1>
        <p>Your Truffle Box is installed and ready.</p>
        <h2>Smart Contract Example</h2>
        <p>
          If your contracts compiled and migrated successfully, below will show
          a stored value of 5 (by default).
        </p>
        <p>
          Try changing the value stored on <strong>line 42</strong> of App.js.
        </p>
        <div>The stored value is: {this.state.storageValue}</div>

        <button onClick={this.createAuc}>click me </button>


<form>
  <label>enter bid amount</label>
  <input type="number" name="bid"
  value={this.bidAmount}
 onChange={this.handleBidChange.bind(this)}
  />

</form>
<button onClick={this.createBid.bind(this)}>click me </button>

      </div>
    );
  }
}

export default App;
